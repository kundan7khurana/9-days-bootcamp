
class Queue:
    def __init__(self, n):
        self.arr = [None] * n  # Initialize array with None
        self.size = n
        self.rear = -1
        self.front = -1

    def is_empty(self):
        return self.rear == -1 and self.front == -1

    def is_full(self):
        return (self.rear + 1) % self.size == self.front

    # Add function
    def add(self, data):
        if self.is_full():
            print("Queue is full")
            return
        if self.front == -1:
            self.front = 0
        self.rear = (self.rear + 1) % self.size
        self.arr[self.rear] = data

    # Remove function
    def remove(self):
        if self.is_empty():
            print("Queue is empty")
            return -1
        result = self.arr[self.front]
        if self.rear == self.front:
            self.rear = self.front = -1  # Reset queue when empty
        else:
            self.front = (self.front + 1) % self.size
        return result

    # Peek function (peek in front)
    def peek(self):
        if self.is_empty():
            print("Queue is empty")
            return -1
        return self.arr[self.front]

# Driver code to test the Queue implementation
if __name__ == "__main__":
    q = Queue(5)
    q.add(1)
    q.add(2)
    q.add(3)
    q.add(4)

    while not q.is_empty():
        print(q.peek())
        q.remove()
1
2
3
4
from collections import deque

class Deques:
    def __init__(self):
        self.deque = deque()

    def main(self):
        # Adding elements to deque
        self.deque.appendleft(1)  
        self.deque.appendleft(3)  
        self.deque.append(4)      
        self.deque.append(4)      
        self.deque.appendleft(9)  

        print(self.deque)

        # Removing last element (Equivalent to removeLast in Java)
        self.deque.pop()
        print(self.deque)

        # Getting first and last elements
        print("first el= ", self.deque[0])  
        print("last el= ", self.deque[-1])  

# Driver code to test the Deques implementation
if __name__ == "__main__":
    dq = Deques()
    dq.main()
deque([9, 3, 1, 4, 4])
deque([9, 3, 1, 4])
first el=  9
last el=  4
 
