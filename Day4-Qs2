#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node in the linked list
struct Node {
    int data;            // Data part of the node
    struct Node* next;   // Pointer to the next node
};

// Define the structure for the circular queue
struct CircularQueue {
    struct Node* front;  // Points to the front node
    struct Node* rear;   // Points to the rear node
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Function to create an empty circular queue
struct CircularQueue* createQueue() {
    struct CircularQueue* queue = (struct CircularQueue*)malloc(sizeof(struct CircularQueue));
    queue->front = queue->rear = NULL;
    return queue;
}

// Function to check if the queue is empty
int isEmpty(struct CircularQueue* queue) {
    return (queue->front == NULL);
}

// Function to add an element to the circular queue (enqueue)
void enqueue(struct CircularQueue* queue, int value) {
    struct Node* newNode = createNode(value);

    if (isEmpty(queue)) {
        queue->front = queue->rear = newNode;  // If the queue is empty, front and rear are the same
        queue->rear->next = queue->front;      // Make it circular by pointing rear's next to front
    } else {
        queue->rear->next = newNode;           // Link the old rear node to the new node
        queue->rear = newNode;                 // Move rear to the new node
        queue->rear->next = queue->front;      // Make it circular by pointing rear's next to front
    }
    printf("Enqueued %d\n", value);
}

// Function to remove an element from the circular queue (dequeue)
void dequeue(struct CircularQueue* queue) {
    if (isEmpty(queue)) {
        printf("Queue underflow! Cannot dequeue.\n");
        return;
    }

    struct Node* temp = queue->front;

    // If there is only one node in the queue
    if (queue->front == queue->rear) {
        queue->front = queue->rear = NULL;
    } else {
        queue->front = queue->front->next;     // Move front to the next node
        queue->rear->next = queue->front;      // Maintain circular structure
    }

    printf("Dequeued %d\n", temp->data);
    free(temp);  // Free the memory of the dequeued node
}

// Function to get the front element of the queue without removing it (peek)
int peek(struct CircularQueue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty! No front element.\n");
        return -1;
    }
    return queue->front->data;
}

// Function to display the elements in the circular queue
void displayQueue(struct CircularQueue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
        return;
    }

    struct Node* temp = queue->front;
    printf("Circular Queue: ");
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != queue->front);
    printf("(Back to Front)\n");
}

// Main function to demonstrate circular queue operations
int main() {
    struct CircularQueue* queue = createQueue();

    enqueue(queue, 10);
    enqueue(queue, 20);
    enqueue(queue, 30);
    enqueue(queue, 40);
    displayQueue(queue);

    printf("Front element: %d\n", peek(queue));

    dequeue(queue);
    displayQueue(queue);

    enqueue(queue, 50);
    displayQueue(queue);

    dequeue(queue);
    displayQueue(queue);

    return 0;
}
