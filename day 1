#include <stdio.h>
#include <stdlib.h>

#define MAX 5  // Define the maximum size of the stack

int stack[MAX];
int top = -1;  // Initialize the top of the stack

// Function to check if the stack is full
int isFull() {
    return top == MAX - 1;
}

// Function to check if the stack is empty
int isEmpty() {
    return top == -1;
}

// Function to push an element onto the stack
void push(int value) {
    if (isFull()) {
        printf("Stack overflow! Cannot push %d\n", value);
    } else {
        top++;
        stack[top] = value;
        printf("Pushed %d onto the stack\n", value);
    }
}

// Function to pop an element from the stack
int pop() {
    if (isEmpty()) {
        printf("Stack underflow! Cannot pop\n");
        return -1;
    } else {
        int poppedValue = stack[top];
        top--;
        printf("Popped %d from the stack\n", poppedValue);
        return poppedValue;
    }
}

// Function to peek at the top element of the stack
int peek() {
    if (isEmpty()) {
        printf("Stack is empty! Cannot peek\n");
        return -1;
    } else {
        return stack[top];
    }
}

// Main function to demonstrate stack operations
int main() {
    push(10);
    push(20);
    push(30);
    push(40);
    push(50);  // Stack is now full
    push(60);  // This should cause a stack overflow

    printf("Top element is %d\n", peek());

    pop();
    pop();
    pop();
    pop();
    pop();  // Stack is now empty
    pop();  // This should cause a stack underflow

    return 0;
}
