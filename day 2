#include <stdio.h>
#include <stdlib.h>

#define MAX 5  // Define the maximum size of the queue

int queue[MAX];
int front = -1, rear = -1;  // Initialize front and rear

// Function to check if the queue is full
int isFull() {
    return rear == MAX - 1;
}

// Function to check if the queue is empty
int isEmpty() {
    return front == -1 || front > rear;
}

// Function to enqueue (add) an element to the queue
void enqueue(int value) {
    if (isFull()) {
        printf("Queue overflow! Cannot enqueue %d\n", value);
    } else {
        if (front == -1) {
            front = 0;  // First insertion
        }
        rear++;
        queue[rear] = value;
        printf("Enqueued %d into the queue\n", value);
    }
}

// Function to dequeue (remove) an element from the queue
int dequeue() {
    if (isEmpty()) {
        printf("Queue underflow! Cannot dequeue\n");
        return -1;
    } else {
        int dequeuedValue = queue[front];
        front++;
        printf("Dequeued %d from the queue\n", dequeuedValue);

        // Reset the queue if all elements are dequeued
        if (front > rear) {
            front = rear = -1;
        }

        return dequeuedValue;
    }
}

// Function to get the front element of the queue
int peek() {
    if (isEmpty()) {
        printf("Queue is empty! Cannot peek\n");
        return -1;
    } else {
        return queue[front];
    }
}

// Main function to demonstrate queue operations
int main() {
    enqueue(10);
    enqueue(20);
    enqueue(30);
    enqueue(40);
    enqueue(50);  // Queue is now full
    enqueue(60);  // This should cause a queue overflow

    printf("Front element is %d\n", peek());

    dequeue();
    dequeue();
    dequeue();
    dequeue();
    dequeue();  // Queue is now empty
    dequeue();  // This should cause a queue underflow

    return 0;
}
